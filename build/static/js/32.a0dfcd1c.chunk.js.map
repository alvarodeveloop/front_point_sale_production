{"version":3,"sources":["pages/UserCreatePage.jsx"],"names":["UserCreatePage","props","useState","name","email","rut","password","id_rol","userData","setUserData","address","is_open","id","enterpriseForm","setEnterpriseForm","modulesUser","setModulesUser","roles","setRoles","modules","setModules","validated","setValidated","isUpdate","setIsUpdate","typeDisplayModule","setTypeDisplayModule","enterpriseArray","setEntepriseArray","messageDisplay","setMessageDisplay","useEffect","promises","axios","get","API_URL","match","params","push","Promise","all","then","result","data","user","map","v","id_menu","enterprise","message","catch","err","toast","error","fetchModules","onChange","e","target","value","cleanEnterprise","onChangeEnterprise","checked","handleAccess","a","persist","filter","renderMenuNew","type","menu","setMenu","setTimeout","history","updateEnterprise","id_enterprise","display","enter","find","onSubmit","form","currentTarget","preventDefault","checkValidity","stopPropagation","length","Object","assign","id_rol_user","parseInt","JSON","parse","localStorage","getItem","id_sucursal","route","put","success","response","post","noValidate","sm","md","lg","xs","style","borderRight","className","inputName","handleChange","inputEmail","inputRut","inputPassword","inputSelect","cols","i","key","name_role","size","variant","block","onClick","replace","Group","Check","custom","name_item","label","f","arreglo","color","textTransform","src","require","width","required","messageErrors","defaultProps","connect"],"mappings":"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","file":"static/js/32.a0dfcd1c.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { FaCheckCircle, FaTrashAlt, FaPlusCircle,FaUsers,FaArrowAltCircleUp } from \"react-icons/fa\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Container,\r\n  Image,\r\n} from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport { setMenu } from 'actions/menu'\r\nimport InputField from 'components/input/InputComponent'\r\nimport axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport { API_URL } from 'utils/constants'\r\nimport 'styles/pages/users.css'\r\nlet count = 0\r\n\r\nconst UserCreatePage  = props => {\r\n\r\n  const [userData,setUserData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    rut: \"\",\r\n    password: \"\",\r\n    id_rol: \"\"\r\n  })\r\n  const [enterpriseForm,setEnterpriseForm] = useState({\r\n    name: \"\",\r\n    address: \"\",\r\n    is_open: true,\r\n    id: ''\r\n  })\r\n\r\n  const [modulesUser,setModulesUser] = useState([])\r\n  const [roles,setRoles] = useState([])\r\n  const [modules,setModules] = useState([])\r\n  const [validated, setValidated] = useState(false);\r\n  const [isFormClean, setIsFormClean] = useState(false);\r\n  const [isUpdate, setIsUpdate] = useState(false);\r\n  const [typeDisplayModule, setTypeDisplayModule] = useState(1)\r\n  const [enterpriseArray, setEntepriseArray] = useState([])\r\n  const [messageDisplay , setMessageDisplay] = useState('')\r\n\r\n  const fetchModules = () => {\r\n\r\n    let promises = [\r\n      axios.get(API_URL+'modules'),\r\n      axios.get(API_URL+'roles'),\r\n    ]\r\n\r\n    if(props.match.params.id > 0){\r\n      promises.push(\r\n        axios.get(API_URL+'user/'+props.match.params.id),\r\n      )\r\n    }\r\n\r\n    Promise.all(promises).then(result => {\r\n      setModules(result[0].data)\r\n      setRoles(result[1].data)\r\n\r\n      if(props.match.params.id){\r\n        setUserData({\r\n          name: result[2].data.user.name,\r\n          email: result[2].data.user.email,\r\n          rut: result[2].data.user.rut,\r\n          password: \"\",\r\n          id_rol: result[2].data.user.id_rol\r\n        })\r\n        if(result[2].data.user.id_rol == 1 || result[2].data.user.id_rol == 3 || result[2].data.user.id_rol == 4){\r\n          setModulesUser(result[2].data.modules.map(v => v.id_menu))\r\n        }else if(result[2].data.user.id_rol == 2){\r\n          setTypeDisplayModule(2)\r\n          setEntepriseArray(result[2].data.user.enterprise)\r\n        }else if(result[2].data.user.id_rol > 4){\r\n          setTypeDisplayModule(3)\r\n        }\r\n        if(result[2].data.message) setMessageDisplay(result[2].data.message)\r\n        setIsUpdate(true)\r\n      }\r\n    }).catch(err => {\r\n      toast.error('Error, contacte con soporte')\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchModules()\r\n  },[])\r\n\r\n  const onChange = e => {\r\n    if(e.target.name === \"id_rol\"){\r\n      if(e.target.value == 2){\r\n        setTypeDisplayModule(2)\r\n      }else if( (e.target.value >= 3 && e.target.value <= 4 ) || e.target.value == 1){\r\n        setTypeDisplayModule(1)\r\n        cleanEnterprise()\r\n      }else{\r\n        setTypeDisplayModule(3)\r\n        cleanEnterprise()\r\n      }\r\n    }\r\n    setUserData({ ...userData, [e.target.name] : e.target.value })\r\n  }\r\n\r\n  const onChangeEnterprise = e => {\r\n    setEnterpriseForm({ ...enterpriseForm, [e.target.name] : e.target.name === \"is_open\" ? e.target.checked : e.target.value })\r\n  }\r\n\r\n  const handleAccess = async (e,id) => {\r\n    e.persist()\r\n    if(e.target.checked){\r\n      await setModulesUser([...modulesUser,id])\r\n    }else{\r\n      setModulesUser(modulesUser.filter(v => v != e.target.value))\r\n    }\r\n  }\r\n\r\n  const addAllModules = () => {\r\n    let arreglo = modules.map(v => v.id)\r\n    setModulesUser(arreglo)\r\n  }\r\n\r\n  const removeAllModules = () => {\r\n    setModulesUser([])\r\n  }\r\n\r\n  const onSubmit = e => {\r\n    const form = e.currentTarget;\r\n    e.preventDefault();\r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      setValidated(true);\r\n      return\r\n    }\r\n    if(modulesUser.length === 0 && (userData.id_rol == 1 || userData.id_rol == 3 || userData.id_rol == 4) ){\r\n      e.stopPropagation();\r\n      setValidated(true);\r\n      toast.error('Debe escoger al menos un módulo para el usuario')\r\n      return\r\n    }\r\n\r\n    let user = Object.assign({},userData,{\r\n      modules: modulesUser,\r\n      enterprise : enterpriseForm\r\n    })\r\n\r\n    if(!isUpdate){\r\n      if(!user.password){\r\n        toast.error('Debe escribir una contraseña')\r\n        return false\r\n      }\r\n    }\r\n\r\n    let id_rol_user = parseInt(JSON.parse(localStorage.getItem('user')).id_rol,10)\r\n    if(user.id_rol >= 4 && user.id_rol <= 7){\r\n      user.id_sucursal = localStorage.getItem('id_sucursal')\r\n    }\r\n\r\n    let route = ''\r\n\r\n    if(isUpdate){\r\n\r\n      route = id_rol_user >= 3 && id_rol_user <= 7 ? API_URL+'user_by_branch_office/'+props.match.params.id : API_URL+'user/'+props.match.params.id\r\n\r\n      axios.put(route,user).then(result => {\r\n        toast.success('Usuario Modificado')\r\n        renderMenuNew(true)\r\n      }).catch(err => {\r\n        const { response } = err\r\n        if(response){\r\n          toast.error(response.data.message)\r\n        }else{\r\n          toast.error('Error, contacte con soporte')\r\n        }\r\n      })\r\n    }else{\r\n      route = id_rol_user >= 3 && id_rol_user <= 7 ? API_URL+'user_by_brach_office' : API_URL+'user'\r\n      axios.post(route,user).then(result => {\r\n        toast.success('Usuario Registrado')\r\n        renderMenuNew(false)\r\n      }).catch(err => {\r\n        const { response } = err\r\n        if(response){\r\n          toast.error(response.data.message)\r\n        }else{\r\n          toast.error('Error, contacte con soporte')\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const cleanForm = () => {\r\n    setUserData({\r\n      name: \"\",\r\n      email: \"\",\r\n      rut: \"\",\r\n      password: \"\",\r\n      id_rol: 1\r\n    })\r\n    setModulesUser([])\r\n    setValidated(false)\r\n  }\r\n\r\n  const cleanEnterprise = () => {\r\n    setEnterpriseForm({\r\n      name: \"\",\r\n      address: \"\",\r\n      is_open: true,\r\n      id: ''\r\n    })\r\n  }\r\n\r\n  const goToListUser = () => {\r\n    props.history.replace('/user/list')\r\n  }\r\n\r\n  const renderMenuNew = async type => {\r\n    const menu = await axios.get(API_URL+'menu_user')\r\n    props.setMenu(menu.data)\r\n    if(type){\r\n      setTimeout(() => {\r\n        props.history.push('/user/list')\r\n      },1000)\r\n    }else{\r\n      cleanForm()\r\n      cleanEnterprise()\r\n    }\r\n  }\r\n\r\n  const updateEnterprise = (id_enterprise, display = false) => {\r\n    if(!display){\r\n      let enter = enterpriseArray.find(v => v.id === id_enterprise)\r\n      setEnterpriseForm({name: enter.name, address: enter.address, id: id_enterprise, is_open: enter.is_open})\r\n    }else{\r\n      cleanEnterprise()\r\n    }\r\n  }\r\n\r\n  return(\r\n    <Container>\r\n      <Form onSubmit={onSubmit} noValidate validated={validated}>\r\n        <Row>\r\n          <Col sm={ typeDisplayModule > 4 ? 12 : 5 } md={typeDisplayModule > 4 ? 12 : 5} lg={typeDisplayModule > 4 ? 12 : 5} xs={12} style={{borderRight: '1px solid rgb(237, 237, 237)'}}>\r\n\r\n            <h3 className=\"text-center font-title\">Formulario</h3>\r\n            <br/>\r\n            <Row>\r\n              <InputField\r\n                { ...props.inputName}\r\n                handleChange={onChange}\r\n                value={userData.name}\r\n                />\r\n              <InputField\r\n                { ...props.inputEmail}\r\n                handleChange={onChange}\r\n                value={userData.email}\r\n                />\r\n            </Row>\r\n            <Row>\r\n              <InputField\r\n                { ...props.inputRut}\r\n                handleChange={onChange}\r\n                value={userData.rut}\r\n                />\r\n              <InputField\r\n                { ...props.inputPassword}\r\n                handleChange={onChange}\r\n                value={userData.password}\r\n                />\r\n            </Row>\r\n            <Row>\r\n              <InputField\r\n                { ...props.inputSelect}\r\n                cols={typeDisplayModule < 5 ? 'col-md-6 col-sm-6 col-lg-6' : 'col-md-12 col-sm-12 col-lg-12'}\r\n                handleChange={onChange}\r\n                value={userData.id_rol}\r\n              >\r\n                <option value=''>--Seleccione--</option>\r\n                {roles.map((v,i) => (\r\n                  <option key={i} value={v.id}>{v.name_role}</option>\r\n                ))}\r\n              </InputField>\r\n            </Row>\r\n            <Row>\r\n              <Col sm={12} md={12} lg={12} xs={12} className=\"text-center\">\r\n                <Button size=\"sm\" type=\"submit\" variant=\"primary\" block>Enviar <FaPlusCircle /></Button>\r\n                  o\r\n                <Button size=\"sm\" onClick={goToListUser} type=\"button\" variant=\"info\" block>Ir al Listado</Button>\r\n              </Col>\r\n            </Row>\r\n            <br/>\r\n            {messageDisplay ? (\r\n              <p className=\"alert alert-info text-center\">{messageDisplay}</p>\r\n            ) : ''}\r\n          </Col>\r\n          {\r\n            typeDisplayModule == 1 ? (\r\n              <Col sm={7} md={7} lg={7} xs={12} className=\"containerDivSeparated\">\r\n                <h3 className=\"text-center font-title\">Módulos</h3>\r\n                <Row>\r\n                  {modules.map((v,i) => (\r\n                    <Col sm={4} md={4} lg={4} xs={6} key={i}>\r\n                      <Form.Group>\r\n                        <Form.Check type=\"checkbox\"\r\n                          custom\r\n                          id={v.name_item+v.id}\r\n                          label={v.name_item}\r\n                          value={v.id}\r\n                          checked={!!modulesUser.find(f => f == v.id)}\r\n                          onChange={(e) => handleAccess(e,v.id) } />\r\n                      </Form.Group>\r\n                    </Col>\r\n                  ))}\r\n                </Row>\r\n                <Row className=\"fixedBottom\">\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <p className=\"text-center\">Hacer click en el botón enviar para guardar los cambios</p>\r\n                  </Col>\r\n                  <Col sm={6} md={6} lg={6} xs={12}>\r\n                    <Button size=\"sm\" variant=\"secondary\" block={true} onClick={addAllModules}>Seleccionar Todos <FaCheckCircle /></Button>\r\n                  </Col>\r\n                  <Col sm={6} md={6} lg={6} xs={12}>\r\n                    <Button size=\"sm\" variant=\"secondary\" block={true} onClick={removeAllModules}>Deseleccionar Todos <FaTrashAlt /></Button>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            ) : typeDisplayModule == 2 ? (\r\n              <Col sm={7} md={7} lg={7} xs={12} className=\"containerDivSeparated\">\r\n                <h3 className=\"text-center font-title\">Datos de la Empresa</h3>\r\n                { isUpdate && !enterpriseForm.id ? (\r\n                  <Row>\r\n                    {enterpriseArray.map((v,i) => (\r\n                      <Col sm={4} md={4} lg={4} className=\"text-center\" key={i}>\r\n                        <h5 style={{color: 'black', textTransform: 'uppercase'}}>{v.name}</h5>\r\n                        <Image src={require('../assets/img/enterprises.jpg')} style={{width: '100%'}}/>\r\n                        <br/>\r\n                        <Button size=\"sm\" variant=\"danger\" block={true} onClick={() => updateEnterprise(v.id)}>Modificar</Button>\r\n                      </Col>\r\n                    ))}\r\n                  </Row>\r\n                ) : (\r\n                  <Row>\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Row>\r\n                        <InputField\r\n                          type='text'\r\n                          label='Nombre empresa'\r\n                          name='name'\r\n                          required={true}\r\n                          messageErrors={[\r\n                            'Requerido*'\r\n                          ]}\r\n                          cols='col-md-6 col-lg-6 col-sm-6'\r\n                          value={enterpriseForm.name}\r\n                          handleChange={onChangeEnterprise}\r\n                          />\r\n                        <InputField\r\n                          type='text'\r\n                          label='Dirección'\r\n                          name='address'\r\n                          required={false}\r\n                          messageErrors={[]}\r\n                          cols='col-md-6 col-lg-6 col-sm-6'\r\n                          value={enterpriseForm.address}\r\n                          handleChange={onChangeEnterprise}\r\n                          />\r\n                      </Row>\r\n                      <Row>\r\n                        <Col sm={4} md={4} lg={4}>\r\n                          <br/>\r\n                          <Form.Group>\r\n                            <Form.Check type=\"checkbox\"\r\n                              custom\r\n                              id={'is_open'}\r\n                              name={'is_open'}\r\n                              label={'Activa'}\r\n                              value={enterpriseForm.is_open}\r\n                              checked={enterpriseForm.is_open}\r\n                              onChange={onChangeEnterprise} />\r\n                          </Form.Group>\r\n                        </Col>\r\n                      </Row>\r\n                      {\r\n                        isUpdate ? (\r\n                          <Row className=\"justify-content-center\">\r\n                            <Col sm={4} md={4} lg={4}>\r\n                              <br/>\r\n                              <Button variant=\"secondary\" size=\"sm\" type=\"button\" block={true} onClick={() => updateEnterprise(null,true)}>Ver Empresas <FaArrowAltCircleUp /></Button>\r\n                            </Col>\r\n                          </Row>\r\n                        ) : ''\r\n                      }\r\n                    </Col>\r\n                  </Row>\r\n                )}\r\n            </Col>\r\n          ) : '' }\r\n        </Row>\r\n      </Form>\r\n    </Container>\r\n  )\r\n}\r\n\r\nUserCreatePage.defaultProps = {\r\n  inputName: {\r\n    type: 'text',\r\n    required: true,\r\n    name: 'name',\r\n    label : 'Nombre Completo',\r\n    messageErrors: [\r\n      'Requerido*'\r\n    ],\r\n    cols:\"col-sm-6 col-md-6 col-lg-6 col-xs-6\"\r\n  },\r\n  inputEmail: {\r\n    type: 'email',\r\n    required: true,\r\n    name: 'email',\r\n    label : 'Email',\r\n    messageErrors: [\r\n      'Requerido*, ','Formato tipo Email*'\r\n    ],\r\n    cols:\"col-sm-6 col-md-6 col-lg-6 col-xs-6\"\r\n  },\r\n  inputRut: {\r\n    type: 'text',\r\n    required: true,\r\n    name: 'rut',\r\n    label : 'Documento Identidad',\r\n    messageErrors: [\r\n      'Requerido*'\r\n    ],\r\n    cols:\"col-sm-6 col-md-6 col-lg-6 col-xs-6\"\r\n  },\r\n  inputPassword: {\r\n    type: 'password',\r\n    required: false,\r\n    name: 'password',\r\n    label : 'Contraseña',\r\n    messageErrors: [\r\n      'Requerido*'\r\n    ],\r\n    cols:\"col-sm-6 col-md-6 col-lg-6 col-xs-6\"\r\n  },\r\n  inputSelect: {\r\n    type: 'select',\r\n    required: true,\r\n    name: 'id_rol',\r\n    label : 'Rol',\r\n    messageErrors: [\r\n      'Requerido*'\r\n    ],\r\n  },\r\n}\r\n\r\nUserCreatePage.propTypes = {\r\n  setMenu: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nfunction mapDispatchToProps(){\r\n    return {\r\n      setMenu,\r\n    }\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps())(UserCreatePage)\r\n"],"sourceRoot":""}